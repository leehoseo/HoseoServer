// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRADE_H_
#define FLATBUFFERS_GENERATED_TRADE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

struct FCT_Login;
struct FCT_LoginBuilder;

struct FTQ_Login;
struct FTQ_LoginBuilder;

struct FCT_Login : private ::flatbuffers::Table {
  typedef FCT_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PWD = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *pwd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PWD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_PWD) &&
           verifier.VerifyString(pwd()) &&
           verifier.EndTable();
  }
};

struct FCT_LoginBuilder {
  typedef FCT_Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FCT_Login::VT_NAME, name);
  }
  void add_pwd(::flatbuffers::Offset<::flatbuffers::String> pwd) {
    fbb_.AddOffset(FCT_Login::VT_PWD, pwd);
  }
  explicit FCT_LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FCT_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FCT_Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FCT_Login> CreateFCT_Login(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pwd = 0) {
  FCT_LoginBuilder builder_(_fbb);
  builder_.add_pwd(pwd);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FCT_Login> CreateFCT_LoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *pwd = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto pwd__ = pwd ? _fbb.CreateString(pwd) : 0;
  return CreateFCT_Login(
      _fbb,
      name__,
      pwd__);
}

struct FTQ_Login : private ::flatbuffers::Table {
  typedef FTQ_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PWD = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *pwd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PWD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_PWD) &&
           verifier.VerifyString(pwd()) &&
           verifier.EndTable();
  }
};

struct FTQ_LoginBuilder {
  typedef FTQ_Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FTQ_Login::VT_NAME, name);
  }
  void add_pwd(::flatbuffers::Offset<::flatbuffers::String> pwd) {
    fbb_.AddOffset(FTQ_Login::VT_PWD, pwd);
  }
  explicit FTQ_LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FTQ_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FTQ_Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FTQ_Login> CreateFTQ_Login(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pwd = 0) {
  FTQ_LoginBuilder builder_(_fbb);
  builder_.add_pwd(pwd);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FTQ_Login> CreateFTQ_LoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *pwd = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto pwd__ = pwd ? _fbb.CreateString(pwd) : 0;
  return CreateFTQ_Login(
      _fbb,
      name__,
      pwd__);
}

inline const FTQ_Login *GetFTQ_Login(const void *buf) {
  return ::flatbuffers::GetRoot<FTQ_Login>(buf);
}

inline const FTQ_Login *GetSizePrefixedFTQ_Login(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FTQ_Login>(buf);
}

inline bool VerifyFTQ_LoginBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FTQ_Login>(nullptr);
}

inline bool VerifySizePrefixedFTQ_LoginBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FTQ_Login>(nullptr);
}

inline void FinishFTQ_LoginBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FTQ_Login> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFTQ_LoginBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FTQ_Login> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_TRADE_H_
